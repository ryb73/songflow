#include <jni.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <android/log.h>
#include "api.h"
#include "blah_Test.h"

#define LOGD(...) ((void)__android_log_print(ANDROID_LOG_DEBUG, "rbd", __VA_ARGS__))

extern const uint8_t g_appkey[] = {
	0x01, 0x22, 0x49, 0x94, 0x8F, 0x52, 0xCB, 0xB0, 0xCD, 0x78, 0xE5, 0x1C, 0x9E, 0x43, 0x88, 0xA1,
	0xBE, 0x19, 0xDA, 0x7F, 0x11, 0xA7, 0xDD, 0x49, 0x8A, 0xBE, 0xD0, 0xA3, 0x61, 0x81, 0x7D, 0xBD,
	0x09, 0x47, 0xE3, 0x79, 0x87, 0x7D, 0x85, 0xD6, 0x3D, 0xDC, 0xD3, 0x3F, 0x0B, 0x7B, 0x6F, 0x6C,
	0x3C, 0x92, 0x56, 0xBC, 0x9A, 0xAA, 0x1F, 0x98, 0x58, 0xE2, 0x7A, 0x6F, 0x80, 0xCE, 0x80, 0xD0,
	0x23, 0xD9, 0x2B, 0xE4, 0xEC, 0x96, 0x40, 0x99, 0xBA, 0xC5, 0x8C, 0x98, 0xF4, 0x01, 0xF7, 0x76,
	0x10, 0xED, 0x8C, 0xC7, 0x7B, 0x0D, 0x90, 0xD3, 0x7E, 0x27, 0x74, 0xBC, 0x8B, 0x33, 0x48, 0x73,
	0xBD, 0x05, 0x5E, 0xF9, 0x44, 0xA6, 0xCC, 0x63, 0xC4, 0xE8, 0x37, 0x2F, 0xB2, 0x90, 0x8E, 0x31,
	0x0F, 0x33, 0xD1, 0x53, 0x45, 0xCC, 0x72, 0x82, 0x2E, 0xD3, 0xB5, 0x3B, 0xBD, 0x51, 0x07, 0xF9,
	0xE6, 0x1E, 0xDE, 0xB4, 0xBA, 0x16, 0x84, 0x64, 0xB1, 0xC3, 0x34, 0x81, 0x74, 0x48, 0x34, 0x18,
	0xC5, 0x4F, 0x96, 0xB8, 0xD8, 0x7C, 0x4B, 0xC7, 0x36, 0xD4, 0x98, 0xF1, 0xCA, 0x5E, 0xC5, 0xCA,
	0x6F, 0xAD, 0xDD, 0x34, 0x35, 0x08, 0xC3, 0x63, 0x4C, 0x8C, 0x49, 0xA3, 0xD9, 0xD1, 0x84, 0x89,
	0xAC, 0x2A, 0x8F, 0x8F, 0x60, 0x48, 0x09, 0xAA, 0xF6, 0x4C, 0x88, 0xF4, 0x9D, 0xEE, 0x08, 0xE1,
	0x0E, 0xA2, 0x46, 0xE6, 0x71, 0xDD, 0xA5, 0xF8, 0x24, 0xAD, 0x39, 0xB3, 0x6C, 0xB0, 0x28, 0x46,
	0x76, 0xD3, 0xC1, 0x5E, 0x56, 0x5A, 0x95, 0x0E, 0x33, 0xD5, 0x15, 0x77, 0x4B, 0x0B, 0x71, 0xB4,
	0x58, 0x6C, 0xE2, 0x21, 0xEB, 0xBB, 0xFA, 0xA0, 0xB0, 0xDA, 0x5D, 0x88, 0x90, 0xCD, 0x0E, 0x45,
	0x10, 0xB3, 0x4E, 0x5A, 0xF7, 0x04, 0x23, 0x14, 0x85, 0x0A, 0x86, 0xE3, 0x11, 0xE3, 0x40, 0xBA,
	0x1C, 0xB6, 0x3A, 0x7B, 0xAF, 0x01, 0x32, 0xEC, 0xB0, 0xB0, 0x45, 0x13, 0x3A, 0x3A, 0x75, 0xE6,
	0xCA, 0xF6, 0x14, 0xAE, 0xCC, 0xFE, 0xC3, 0x49, 0xF1, 0x15, 0xA3, 0xB5, 0x5F, 0x66, 0x60, 0xE9,
	0x17, 0x8B, 0xA8, 0xD0, 0x46, 0x9B, 0x6A, 0x39, 0x96, 0xA3, 0x9C, 0x32, 0xEC, 0x11, 0x1D, 0x65,
	0x50, 0x92, 0x2E, 0xEB, 0x8D, 0x82, 0xFC, 0xF6, 0xB3, 0x0F, 0x5D, 0x18, 0xF0, 0x59, 0x0E, 0x9E,
	0x45,
};
extern const size_t g_appkey_size = sizeof(g_appkey);

sp_session* g_Session = NULL;
char supMsg[100] = "";

extern "C" {

void printMouse();

void loggedIn(sp_session* sess, sp_error error) {
	char msg[100];
	strcpy(msg, "loggedIn called");
	if(error != SP_ERROR_OK) {
		strcat(msg, ", error: ");
		strcat(msg, sp_error_message(error));
	} else {
		printMouse();
	}
	LOGD(msg);
}

void connectionError(sp_session* sess, sp_error error) {
	char msg[100];
	strcpy(msg, "connectionError called");
	if(error != SP_ERROR_OK) {
		strcat(msg, ", error: ");
		strcat(msg, sp_error_message(error));
	}
	LOGD(msg);
}

void connStateUpdated(sp_session* sess) {
	LOGD("connStateUpdated called");
}

void logMessage(sp_session* sess, const char* message) {
	//strcpy(supMsg, "logMessage called: ");
	//strcat(supMsg, message);
	LOGD(message);
}

void offlineError(sp_session* sess, sp_error error) {
	char msg[100];
	strcpy(msg, "offlineError called");
	if(error != SP_ERROR_OK) {
		strcat(msg, ", error: ");
		strcat(msg, sp_error_message(error));
	}
	LOGD(msg);
}

void offlineStatusUpdated(sp_session* sess) {
	LOGD("offlineStatusUpdated called");
}

void userInfoUpdated(sp_session* sess) {
	LOGD("userInfoUpdated called");
}

void notifyMainThread(sp_session* sess) {
	int n;
	sp_session_process_events(sess, &n);
}

void metadataUpdated(sp_session* sess) {
	LOGD("metadata updated");
}

void create_session(char* err) {
	if (g_Session != NULL) {
		strcpy(err, "session already created");
		return;
	}

	sp_error error;
	sp_session_config config;

	memset(&config, 0, sizeof(config));
	config.application_key = g_appkey;
	config.application_key_size = g_appkey_size;
	config.user_agent = "songflow";
	config.api_version = SPOTIFY_API_VERSION;
	config.tracefile = "/tmp/spotify/trace";
	config.cache_location = "/tmp/spotify/cache/";
	config.settings_location = "cache_location";

	sp_session_callbacks callbacks;
	memset(&callbacks, 0, sizeof(callbacks));
	callbacks.logged_in = loggedIn;
	callbacks.connection_error = connectionError;
	callbacks.connectionstate_updated = connStateUpdated;
	callbacks.log_message = logMessage;
	callbacks.offline_error = offlineError;
	callbacks.offline_status_updated = offlineStatusUpdated;
	callbacks.userinfo_updated = userInfoUpdated;
	callbacks.notify_main_thread = notifyMainThread;
	callbacks.metadata_updated = metadataUpdated;
	
	config.callbacks = &callbacks;

	error = sp_session_create(&config, &g_Session);
	if(error != SP_ERROR_OK) {
		strcpy(err, sp_error_message(error));
	}

	error = sp_session_login(g_Session, "ryguy_@hotmail.com", "hohojaws9", true, NULL);
	if(error != SP_ERROR_OK) {
		strcpy(err, sp_error_message(error));
	}
}

JNIEXPORT jstring JNICALL
Java_blah_Test_sup(JNIEnv *env, jobject obj) {
	char err[100] = "";

	create_session(err);
	if(strlen(err) > 0) {
		return env->NewStringUTF(err);
	}

	//while(strlen(supMsg) == 0);
	return env->NewStringUTF(supMsg);
}

void printMouse() {
	char linkStr[100];
	strcpy(linkStr, "http://open.spotify.com/track/4ToYlykhwpW98KtMIGnWQK");

	sp_link* link;
	link = sp_link_create_from_string(linkStr);
	if (link == NULL) {
		LOGD("null link");
		return;
	}
	sp_track* track = sp_link_as_track(link);
	if (track == NULL) {
		LOGD("null track");
		return;
	}
	sp_error error = sp_track_error(track);
	if(error != SP_ERROR_OK) {
		LOGD("track error: %s", sp_error_message(error));
		return;
	}
	LOGD(sp_track_name(track));

	error = sp_link_release(link);
	if(error != SP_ERROR_OK) {
		LOGD("link release error: %s", sp_error_message(error));
	}
}

}
